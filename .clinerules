### BEGIN GENERAL RULES

If you encounter any new information that could improve the efficiency of AI assistants when working on this project, add it to the `.clinerules` file.

Ensure that the information is added to the appropriate section:
- **BEGIN SYSTEM:** Add information relevant only to the current system.
- **BEGIN Local project specific hints:** Add information specific to the current project.

Organizing information correctly ensures accurate and efficient assistance in future tasks.

### BEGIN SYSTEM

# System Environment

OS: Windows
Shell: Windows PowerShell

# Shell Limitations

## PowerShell does not support && to combine commands

For example this will not work:
python -m venv venv && .venv\Scripts\activate

Therefore execute commands separately.
For example create the directories one by one.

## How to delete files and folders

"del" command does not work in powershell.
use "Remove-Item"

## How to create multiple folders

Example: mkdir src\core\rules; mkdir src\core\compare


# Helper Scripts

Provide .bat files for automation:
install.bat:
@echo off
echo Installing dependencies...
pause

run.bat:
@echo off
echo Running application...
pause

activate_environment.bat (for python)
@echo off
%~dp0\venv\Scripts\activate.bat

### BEGIN PROJECT

# Structure

- Keep a concise README.md explaining setup and usage
- Group related functionality into separate modules
- Store configuration in appropriate config files

# Documentation & Automation

Provide .bat files for automation:
install.bat:
@echo off
npm install
echo Dependencies installed successfully
pause

run.bat:
@echo off
npm start
pause

### BEGIN LANGUAGE PYTHON

# Coding Standards

- You split large code blocks into managble files and classes.
- Group related classes/functions into separate files under modules.
- Follow PEP 8 style guidelines
- Use docstrings and type hints
- Auto-format code with black
- Use flake8 for linting
- Modular Design

# Virtual Environments

- Create venv for dependency isolation. But only if the directory doesnt exist yet.
- Maintain requirements.txt. Update it after adding new libraries (e.g., pip freeze > requirements.txt). 
- Use latest stable versions of packages

# Logging Best Practices

- Use Python's logging module
- Avoid print statements
- Handle exceptions with proper error messages
- Use appropriate log levels (INFO, WARNING, ERROR)

# Entry Points

- Use main.py for argument parsing and flow
- Use if **name** == "**main**" pattern
- Import modules as needed

# Dependencies

- Maintain requirements.txt file
- Update after adding new libraries (pip freeze > requirements.txt)
- Use latest stable versions for new features and fixes

# Error Handling

- Always use logging class, not print statements
- Handle errors gracefully with clear messages or fallback procedures
- Implement fallback procedures when needed

# Configuration

- Store settings in settings.ini at the project root. Parse these using Pythonâ€™s configparser.
### BEGIN LANGUAGE JAVASCRIPT

# Code Organization

- Use ES6+ features appropriately
- Follow consistent module pattern
- Implement proper error handling
- Use async/await for asynchronous code

# Coding Standards

- Use ESLint for code quality
- Follow consistent naming conventions
- Implement proper type checking

# File Structure

- Organize by feature or type
- Keep modules small and focused
- Use clear, descriptive names
- Separate concerns appropriately

# Error Handling

- Use try/catch blocks for async code
- Implement proper error boundaries
- Log errors with context
- Provide user-friendly error messages

# Performance

- Optimize bundle size
- Implement code splitting
- Use lazy loading where appropriate

# Security

- Validate all inputs
- Sanitize data appropriately
- Use secure dependencies
- Follow OWASP guidelines

# Browser Compatibility

- Use appropriate polyfills
- Handle vendor prefixes

### BEGIN Local project specific hints



